import streamlit as st
import requests
import json

# Set page config
st.set_page_config(page_title="MindFlow | Gemini AI Assistant", layout="centered")

st.title("ðŸ§  MindFlow â€“ Chat with Gemini AI")
st.write("Ask Gemini a question related to mental well-being, workplace stress, or psychological insights.")

# --- Retrieve API Key Securely ---
try:
    gemini_api_key = st.secrets["GEMINI_API_KEY"]
except KeyError:
    st.error("Gemini API key not found. Please set it in .streamlit/secrets.toml")
    st.stop()

# --- Gemini API Endpoint ---
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"

# --- User Input ---
user_prompt = st.text_area("Your question to Gemini:", height=100)

if st.button("Get a Response"):
    if user_prompt:
        st.info("Generating a response, please wait...")

        payload = {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": user_prompt}
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 500,
            }
        }

        headers = {
            "Content-Type": "application/json",
            "x-goog-api-key": gemini_api_key
        }

        try:
            response = requests.post(GEMINI_API_URL, headers=headers, data=json.dumps(payload))
            response.raise_for_status()
            response_data = response.json()

            if response_data and "candidates" in response_data and len(response_data["candidates"]) > 0:
                generated_text = response_data["candidates"][0]["content"]["parts"][0]["text"]
                st.success("Gemini's response:")
                st.write(generated_text)
            else:
                st.warning("No response generated by Gemini. The request might have been blocked or returned empty content.")
                st.json(response_data)

        except requests.exceptions.RequestException as e:
            st.error(f"Error communicating with Gemini API: {e}")
        except json.JSONDecodeError:
            st.error("JSON decoding error from API response.")
        except Exception as e:
            st.error(f"An unexpected error occurred: {e}")
    else:
        st.warning("Please enter a question for Gemini.")

st.markdown("---")
st.caption("Powered by Google Gemini AI â€¢ Integrated into MindFlow")
